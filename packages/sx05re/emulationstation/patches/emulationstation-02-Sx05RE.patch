diff U3 a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
--- a/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 16:55:16 2017
@@ -24,6 +24,9 @@
 	bool isFullUI = UIModeController::getInstance()->isUIModeFull();
 
 	if (isFullUI)
+	    addEntry("EmuELEC", 0x777777FF, true, [this] { openEmuELECSettings(); });
+	
+	if (isFullUI)
 		addEntry("SCRAPER", 0x777777FF, true, [this] { openScraperSettings(); });
 
 	addEntry("SOUND SETTINGS", 0x777777FF, true, [this] { openSoundSettings(); });
@@ -47,6 +50,484 @@
 	addVersionInfo();
 	setSize(mMenu.getSize());
 	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, Renderer::getScreenHeight() * 0.15f);
+}
+
+void GuiMenu::openEmuELECSettings()
+{
+	auto s = new GuiSettings(mWindow, "EmuELEC Settings");
+	/* this randomly works, so I need to find a better implementation
+	    auto wifi_enabled = std::make_shared<SwitchComponent>(mWindow);
+		wifi_enabled->setState(Settings::getInstance()->getBool("EmuELEC_wifi"));
+		s->addWithLabel("ENABLE WIFI", wifi_enabled);
+		s->addSaveFunc([wifi_enabled] {
+			if (wifi_enabled->getState() == true) {
+				runSystemCommand("/storage/.emulationstation/scripts/wifi.sh &> /storage/.config/wifi.log &");                
+			} else {
+	            runSystemCommand("/storage/.emulationstation/scripts/wifi.sh disconnect &> /storage/.config/wifi.log &");                
+	        }
+			Settings::getInstance()->setBool("EmuELEC_wifi", wifi_enabled->getState());
+		});
+	    */
+	    
+	    auto bgm_enabled = std::make_shared<SwitchComponent>(mWindow);
+		bgm_enabled->setState(Settings::getInstance()->getBool("BGM"));
+		s->addWithLabel("ENABLE BGM", bgm_enabled);
+		s->addSaveFunc([bgm_enabled] {
+			if (Settings::getInstance()->getBool("BGM") != bgm_enabled->getState()) {
+				runSystemCommand("bash /storage/.emulationstation/scripts/bgm.sh");
+                Settings::getInstance()->setBool("BGM", bgm_enabled->getState());
+			}
+		});
+
+		auto emuelec_bgm_boot_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "START BGM AT BOOT", false);
+		std::vector<std::string> bgmboot;
+		bgmboot.push_back("Yes");
+		bgmboot.push_back("No");
+		for (auto it = bgmboot.cbegin(); it != bgmboot.cend(); it++)
+		emuelec_bgm_boot_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_BGM_BOOT") == *it);
+		s->addWithLabel("START BGM AT BOOT", emuelec_bgm_boot_def);
+		s->addSaveFunc([emuelec_bgm_boot_def] {
+			/*runSystemCommand("echo "+emuelec_bgm_boot_def->getSelected()+" > /storage/.config/def_fe");*/
+			if (Settings::getInstance()->getString("EmuELEC_BGM_BOOT") != emuelec_bgm_boot_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_BGM_BOOT",  emuelec_bgm_boot_def->getSelected());
+		});
+		
+       auto sshd_enabled = std::make_shared<SwitchComponent>(mWindow);
+		sshd_enabled->setState(Settings::getInstance()->getBool("SSH"));
+		s->addWithLabel("ENABLE SSH", sshd_enabled);
+		s->addSaveFunc([sshd_enabled] {
+			if (sshd_enabled->getState() == false) {
+				runSystemCommand("systemctl stop sshd"); 
+				} else { 
+				runSystemCommand("systemctl start sshd");
+			}
+                Settings::getInstance()->setBool("SSH", sshd_enabled->getState());
+			});
+			
+		auto emuelec_boot_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "START AT BOOT", false);
+		std::vector<std::string> devices;
+		devices.push_back("Emulationstation");
+		devices.push_back("Retroarch");
+		/*devices.push_back("Kodi");*/
+		for (auto it = devices.cbegin(); it != devices.cend(); it++)
+		emuelec_boot_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_BOOT") == *it);
+		s->addWithLabel("START AT BOOT", emuelec_boot_def);
+		s->addSaveFunc([emuelec_boot_def] {
+			if (Settings::getInstance()->getString("EmuELEC_BOOT") != emuelec_boot_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_BOOT", emuelec_boot_def->getSelected());
+		});
+       
+       auto bezels_enabled = std::make_shared<SwitchComponent>(mWindow);
+		bezels_enabled->setState(Settings::getInstance()->getBool("EmuELEC_BEZELS"));
+		s->addWithLabel("ENABLE RA BEZELS", bezels_enabled);
+		s->addSaveFunc([bezels_enabled] {
+			/* if (bezels_enabled->getState() == false) {
+				runSystemCommand("/emuelec/scripts/enable.sh bezels disable"); 
+				} else { 
+				runSystemCommand("/emuelec/scripts/enable.sh bezels enable"); 
+			} */
+                Settings::getInstance()->setBool("EmuELEC_BEZELS", bezels_enabled->getState());
+			});	
+       
+       auto splash_enabled = std::make_shared<SwitchComponent>(mWindow);
+		splash_enabled->setState(Settings::getInstance()->getBool("EmuELEC_SPLASH"));
+		s->addWithLabel("ENABLE RA SPLASH", splash_enabled);
+		s->addSaveFunc([splash_enabled] {
+		/*	if (splash_enabled->getState() == false) {
+				runSystemCommand("/emuelec/scripts/enable.sh splash disable"); 
+				} else { 
+				runSystemCommand("/emuelec/scripts/enable.sh splash enable"); 
+			} */
+                Settings::getInstance()->setBool("EmuELEC_SPLASH", splash_enabled->getState());
+			});
+
+	ComponentListRow row;
+	
+	row.addElement(std::make_shared<TextComponent>(mWindow, "                                   EMULATOR CHOICES", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+	row.elements.clear();
+	
+	std::string a;
+	std::vector<std::string> emuchoices;
+	
+    /* blank choices for future use */
+    	/* CHOICE 	*/
+	
+	auto emuelec_amiga_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "AMIGA EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh amiga)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_amiga_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_AMIGA_CORE") == *it);
+		s->addWithLabel("AMIGA EMULATOR", emuelec_amiga_def);
+		s->addSaveFunc([emuelec_amiga_def] {
+			if (Settings::getInstance()->getString("EmuELEC_AMIGA_CORE") != emuelec_amiga_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_AMIGA_CORE", emuelec_amiga_def->getSelected());
+		});
+	
+	/* END CHOICE */
+    	/* CHOICE */	
+	
+	auto emuelec_dosbox_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "DOSBOX EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh dosbox)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_dosbox_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_DOSBOX_CORE") == *it);
+		s->addWithLabel("DOSBOX EMULATOR", emuelec_dosbox_def);
+		s->addSaveFunc([emuelec_dosbox_def] {
+			if (Settings::getInstance()->getString("EmuELEC_DOSBOX_CORE") != emuelec_dosbox_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_DOSBOX_CORE", emuelec_dosbox_def->getSelected());
+		});
+	
+	 /* END CHOICE */
+	     	/* CHOICE */	
+	
+	auto emuelec_dreamcast_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "DREAMCAST EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh dreamcast)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_dreamcast_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_REICAST_CORE") == *it);
+		s->addWithLabel("DREAMCAST EMULATOR", emuelec_dreamcast_def);
+		s->addSaveFunc([emuelec_dreamcast_def] {
+			if (Settings::getInstance()->getString("EmuELEC_REICAST_CORE") != emuelec_dreamcast_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_REICAST_CORE", emuelec_dreamcast_def->getSelected());
+		});
+	
+	/* END CHOICE */
+	     	/* CHOICE */
+	
+	auto emuelec_arcade_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "ARCADE EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh arcade)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_arcade_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_ARCADE_CORE") == *it);
+		s->addWithLabel("ARCADE EMULATOR", emuelec_arcade_def);
+		s->addSaveFunc([emuelec_arcade_def] {
+			if (Settings::getInstance()->getString("EmuELEC_ARCADE_CORE") != emuelec_arcade_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_ARCADE_CORE", emuelec_arcade_def->getSelected());
+		});
+	
+	/* END CHOICE */
+	     	/* CHOICE */	
+	
+	auto emuelec_neocd_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "NEOCD EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh neocd)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_neocd_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_NEOCD_CORE") == *it);
+		s->addWithLabel("NEOCD EMULATOR", emuelec_neocd_def);
+		s->addSaveFunc([emuelec_neocd_def] {
+			if (Settings::getInstance()->getString("EmuELEC_NEOCD_CORE") != emuelec_neocd_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_NEOCD_CORE", emuelec_neocd_def->getSelected());
+		});
+	
+	/*END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */
+	     	/* CHOICE 	
+	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	
+	 END CHOICE */    
+
+	/* CHOICE */	
+	auto emuelec_mame_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "MAME EMULATOR", false);
+         emuchoices.clear();  
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh mame)")); getline(ss, a, ','); )
+        emuchoices.push_back(a);
+    
+		for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_mame_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_MAME_CORE") == *it);
+		s->addWithLabel("MAME EMULATOR", emuelec_mame_def);
+		s->addSaveFunc([emuelec_mame_def] {
+			if (Settings::getInstance()->getString("EmuELEC_MAME_CORE") != emuelec_mame_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_MAME_CORE", emuelec_mame_def->getSelected());
+		});
+	/* END CHOICE */
+
+	/* CHOICE */
+	auto emuelec_fbn_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "FBN/NEO-GEO CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh fbn)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_fbn_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_FBN_CORE") == *it);
+		s->addWithLabel("FBN/NEO-GEO CORE", emuelec_fbn_def);
+		s->addSaveFunc([emuelec_fbn_def] {
+			if (Settings::getInstance()->getString("EmuELEC_FBN_CORE") != emuelec_fbn_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_FBN_CORE", emuelec_fbn_def->getSelected());
+		});
+	/* END CHOICE */
+	/* CHOICE */		
+	auto emuelec_psp_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "PSP EMULATOR", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh psp)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_psp_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_PSP_CORE") == *it);
+		s->addWithLabel("PSP EMULATOR", emuelec_psp_def);
+		s->addSaveFunc([emuelec_psp_def] {
+			if (Settings::getInstance()->getString("EmuELEC_PSP_CORE") != emuelec_psp_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_PSP_CORE", emuelec_psp_def->getSelected());
+		});
+	/* END CHOICE */
+    /* CHOICE */		
+	auto emuelec_n64_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "N64 CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh n64)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_n64_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_N64_CORE") == *it);
+		s->addWithLabel("N64 CORE", emuelec_n64_def);
+		s->addSaveFunc([emuelec_n64_def] {
+			if (Settings::getInstance()->getString("EmuELEC_N64_CORE") != emuelec_n64_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_N64_CORE", emuelec_n64_def->getSelected());
+		});
+	/* END CHOICE */	
+    /* CHOICE */		
+	auto emuelec_nes_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "NES/FC/FDS CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh nes)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_nes_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_NES_CORE") == *it);
+		s->addWithLabel("NES/FC/FDS CORE", emuelec_nes_def);
+		s->addSaveFunc([emuelec_nes_def] {
+			if (Settings::getInstance()->getString("EmuELEC_NES_CORE") != emuelec_nes_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_NES_CORE", emuelec_nes_def->getSelected());
+		});
+	/* END CHOICE */
+    /* CHOICE */		
+	auto emuelec_snes_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "SNES CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh snes)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_snes_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_SNES_CORE") == *it);
+		s->addWithLabel("SNES CORE", emuelec_snes_def);
+		s->addSaveFunc([emuelec_snes_def] {
+			if (Settings::getInstance()->getString("EmuELEC_SNES_CORE") != emuelec_snes_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_SNES_CORE", emuelec_snes_def->getSelected());
+		});
+	/* END CHOICE */
+    /* CHOICE */		
+	auto emuelec_gen_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "GENESIS/MS/CD CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh genesis)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_gen_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_GEN_CORE") == *it);
+		s->addWithLabel("GENESIS/MS/CD CORE", emuelec_gen_def);
+		s->addSaveFunc([emuelec_gen_def] {
+			if (Settings::getInstance()->getString("EmuELEC_GEN_CORE") != emuelec_gen_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_GEN_CORE", emuelec_gen_def->getSelected());
+		});
+	/* END CHOICE */
+    /* CHOICE */		
+	auto emuelec_gba_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "GBA CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh gba)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_gba_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_GBA_CORE") == *it);
+		s->addWithLabel("GBA CORE", emuelec_gba_def);
+		s->addSaveFunc([emuelec_gba_def] {
+			if (Settings::getInstance()->getString("EmuELEC_GBA_CORE") != emuelec_gba_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_GBA_CORE", emuelec_gba_def->getSelected());
+		});
+	/* END CHOICE */
+	/* CHOICE */		
+	auto emuelec_gbc_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "GB/GBC CORE", false);
+         emuchoices.clear(); 
+    for(std::stringstream ss(getShOutput(R"(~/.emulationstation/scripts/getcores.sh gbc)")); getline(ss, a, ','); ) 
+        emuchoices.push_back(a);
+    
+	    for (auto it = emuchoices.cbegin(); it != emuchoices.cend(); it++)
+		emuelec_gbc_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_GBC_CORE") == *it);
+		s->addWithLabel("GB/GBC CORE", emuelec_gbc_def);
+		s->addSaveFunc([emuelec_gbc_def] {
+			if (Settings::getInstance()->getString("EmuELEC_GBC_CORE") != emuelec_gbc_def->getSelected())
+				Settings::getInstance()->setString("EmuELEC_GBC_CORE", emuelec_gbc_def->getSelected());
+		});
+	/* END CHOICE */		
+
+	Window* window = mWindow;
+	
+	if (UIModeController::getInstance()->isUIModeFull())
+	{
+	row.addElement(std::make_shared<TextComponent>(window, "                                   !!!!!!!DANGER ZONE!!!!!!!", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+	row.elements.clear();
+
+	row.makeAcceptInputHandler([window] {
+		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING THIS WILL DELETE ALL EMULATOR CONFIGS!!!!!!!!!! RESET EmuELEC EMULATORS TO DEFAULT AND RESTART?", "YES",
+				[] { 
+				runSystemCommand("systemd-run /emuelec/scripts/clearconfig.sh EMUS");
+				}, "NO", nullptr));
+	});
+	row.addElement(std::make_shared<TextComponent>(window, "RESET EmuELEC EMULATORS TO DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+	row.elements.clear();
+	/*
+	row.makeAcceptInputHandler([window] {
+		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING THIS WILL DELETE ALL KODI ADDONS AND CONFIG!!!!!!!!!! RESET KODI TO DEFAULT CONFIG AND RESTART?", "YES",
+				[] { 
+				runSystemCommand("/usr/bin/clearconfig.sh KODI");
+				}, "NO", nullptr));
+	});
+	row.addElement(std::make_shared<TextComponent>(window, "RESET KODI TO DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+	row.elements.clear();
+	*/
+	row.makeAcceptInputHandler([window] {
+		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING THIS WILL DELETE ALL CONFIGS/ADDONS!!!!!!!!!! RESET SYSTEM TO DEFAULT CONFIG AND RESTART?", "YES",
+				[] { 
+				runSystemCommand("systemd-run /emuelec/scripts/clearconfig.sh ALL");
+				}, "NO", nullptr));
+	});
+	row.addElement(std::make_shared<TextComponent>(window, "RESET SYSTEM TO DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+	row.elements.clear();
+	
+	mWindow->pushGui(s);
+ }
 }
 
 void GuiMenu::openScraperSettings()
--- a/es-app/src/guis/GuiMenu.h	2018-03-09 12:11:38.000000000 -0600
+++ b/es-app/src/guis/GuiMenu.h	2018-03-16 01:20:44.411257304 -0600
@@ -26,6 +26,7 @@
 	void openScreensaverOptions();
 	void openSoundSettings();
 	void openUISettings();
+	void openEmuELECSettings();
 
 	MenuComponent mMenu;
 	TextComponent mVersion;
--- a/es-core/src/platform.h
+++ b/es-core/src/platform.h
@@ -26,5 +26,6 @@
 int runSystemCommand(const std::string& cmd_utf8); // run a utf-8 encoded in the shell (requires wstring conversion on Windows)
 int quitES(const std::string& filename);
 void touch(const std::string& filename);
+std::string getShOutput(const std::string& mStr);
 
 #endif // ES_CORE_PLATFORM_H
--- a/es-core/src/platform.cpp
+++ b/es-core/src/platform.cpp
@@ -40,6 +40,23 @@
 #endif
 }
 
+std::string getShOutput(const std::string& mStr)
+{
+    std::string result, file;
+    FILE* pipe{popen(mStr.c_str(), "r")};
+    char buffer[256];
+
+    while(fgets(buffer, sizeof(buffer), pipe) != NULL)
+    {
+        file = buffer;
+        result += file.substr(0, file.size() - 1);
+    }
+
+    pclose(pipe);
+    return result;
+}
+
+
 int quitES(const std::string& filename)
 {
 	touch(filename);
--- a/es-app/src/main.cpp
+++ b/es-app/src/main.cpp
@@ -209,10 +209,10 @@
 	if(SystemData::sSystemVector.size() == 0)
 	{
 		LOG(LogError) << "No systems found! Does at least one system have a game present? (check that extensions match!)\n(Also, make sure you've updated your es_systems.cfg for XML!)";
-		*errorString = "WE CAN'T FIND ANY SYSTEMS!\n"
+		*errorString = ("WE CAN'T FIND ANY SYSTEMS!\n"
 			"CHECK THAT YOUR PATHS ARE CORRECT IN THE SYSTEMS CONFIGURATION FILE, "
-			"AND YOUR GAME DIRECTORY HAS AT LEAST ONE GAME WITH THE CORRECT EXTENSION.\n\n"
-			"VISIT EMULATIONSTATION.ORG FOR MORE INFORMATION.";
+			"AND YOUR GAME DIRECTORY HAS AT LEAST ONE GAME WITH THE CORRECT EXTENSION.\n"
+			"OR INSERT A USB WITH YOUR ROMS AND THE '/roms/emuelecroms' FILE AND RESTART. \n\n  SSH/SFTP IP: " + getShOutput(R"(/storage/.emulationstation/scripts/ip.sh)")).c_str();
 		return false;
 	}
 
@@ -330,11 +330,16 @@
 		// we can't handle es_systems.cfg file problems inside ES itself, so display the error message then quit
 		window.pushGui(new GuiMsgBox(&window,
 			errorMsg,
-			"QUIT", [] {
+			"RESTART ES", [] {
+				runSystemCommand("systemctl restart emustation.service");
 				SDL_Event* quit = new SDL_Event();
 				quit->type = SDL_QUIT;
 				SDL_PushEvent(quit);
-			}));
+			}, "RESTART SYSTEM", [] {
+				/* remove("/var/lock/start.games");
+           	runSystemCommand("touch /var/lock/start.kodi"); */
+		        runSystemCommand("systemctl reboot");
+				}));
 	}
 
 	//run the command line scraper then quit
--- a/es-core/src/Settings.cpp
+++ b/es-core/src/Settings.cpp
@@ -56,6 +56,40 @@
 	mBoolMap.clear();
 	mIntMap.clear();
 
+/* emuELEC default settings */
+	mBoolMap["SSH"] = true;
+	mBoolMap["BGM"] = false;
+	mStringMap["EmuELEC_BGM_BOOT"] = "No";
+	mStringMap["EmuELEC_BOOT"] = "Emulationstation";
+	mStringMap["EmuELEC_FBN_CORE"] = "Libretro_fbneo";
+	mStringMap["EmuELEC_GBA_CORE"] = "Libretro_mgba";
+	mStringMap["EmuELEC_GBC_CORE"] = "Libretro_gambatte";
+	mStringMap["EmuELEC_GEN_CORE"] = "Libretro_genesis_plus_gx";
+	mStringMap["EmuELEC_MAME_CORE"] = "Libretro_mame2003_plus";
+	mStringMap["EmuELEC_ARCADE_CORE"] = "Libretro_mame2003_plus";
+	mStringMap["EmuELEC_N64_CORE"] = "Libretro_mupen64plus_next";
+	mStringMap["EmuELEC_NES_CORE"] = "Libretro_nestopia";
+	mStringMap["EmuELEC_PSP_CORE"] = "PPSSPPSA";
+	mStringMap["EmuELEC_SNES_CORE"] = "Libretro_snes9x";
+	mStringMap["EmuELEC_DOSBOX_CORE"] = "Libretro_dosbox";
+	mStringMap["EmuELEC_AMIGA_CORE"] = "Libretro_puae";
+	mStringMap["EmuELEC_REICAST_CORE"] = "REICASTSA";
+   mStringMap["EmuELEC_NEOCD_CORE"] = "Libretro_libneocd";
+	mBoolMap["EmuELEC_BEZELS"] = false;
+	mBoolMap["EmuELEC_SPLASH"] = false;
+/* space for other settings in the future 
+ * 
+ * 
+ * 
+ * 
+ * 
+ * 
+ * 
+ * 
+ * 
+ * 
+/* end emuELEC default settings */
+
 	mBoolMap["BackgroundJoystickInput"] = false;
 	mBoolMap["ParseGamelistOnly"] = false;
 	mBoolMap["ShowHiddenFiles"] = false;
@@ -69,7 +103,7 @@
 
 	mBoolMap["VSync"] = true;
 
-	mBoolMap["EnableSounds"] = true;
+	mBoolMap["EnableSounds"] = false;
 	mBoolMap["ShowHelpPrompts"] = true;
 	mBoolMap["ScrapeRatings"] = true;
 	mBoolMap["IgnoreGamelist"] = false;
@@ -138,7 +172,7 @@
 	#ifdef _RPI_
 		mStringMap["AudioDevice"] = "PCM";
 	#else
-		mStringMap["AudioDevice"] = "Master";
+		mStringMap["AudioDevice"] = "PCM";
 	#endif
 
 	mStringMap["AudioCard"] = "default";
