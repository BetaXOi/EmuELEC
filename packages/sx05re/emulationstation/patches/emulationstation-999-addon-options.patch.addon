diff U3 a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
--- a/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 16:55:16 2017
@@ -55,69 +55,7 @@
 void GuiMenu::openEmuELECSettings()
 {
 	auto s = new GuiSettings(mWindow, "EmuELEC Settings");
-	/* this randomly works, so I need to find a better implementation
-	    auto wifi_enabled = std::make_shared<SwitchComponent>(mWindow);
-		wifi_enabled->setState(Settings::getInstance()->getBool("EmuELEC_wifi"));
-		s->addWithLabel("ENABLE WIFI", wifi_enabled);
-		s->addSaveFunc([wifi_enabled] {
-			if (wifi_enabled->getState() == true) {
-				runSystemCommand("/storage/.emulationstation/scripts/wifi.sh &> /storage/.config/wifi.log &");                
-			} else {
-	            runSystemCommand("/storage/.emulationstation/scripts/wifi.sh disconnect &> /storage/.config/wifi.log &");                
-	        }
-			Settings::getInstance()->setBool("EmuELEC_wifi", wifi_enabled->getState());
-		});
-	    */
-	    
-	    auto bgm_enabled = std::make_shared<SwitchComponent>(mWindow);
-		bgm_enabled->setState(Settings::getInstance()->getBool("BGM"));
-		s->addWithLabel("ENABLE BGM", bgm_enabled);
-		s->addSaveFunc([bgm_enabled] {
-			if (Settings::getInstance()->getBool("BGM") != bgm_enabled->getState()) {
-				runSystemCommand("bash /storage/.emulationstation/scripts/bgm.sh");
-                Settings::getInstance()->setBool("BGM", bgm_enabled->getState());
-			}
-		});
-
-		auto emuelec_bgm_boot_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "START BGM AT BOOT", false);
-		std::vector<std::string> bgmboot;
-		bgmboot.push_back("Yes");
-		bgmboot.push_back("No");
-		for (auto it = bgmboot.cbegin(); it != bgmboot.cend(); it++)
-		emuelec_bgm_boot_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_BGM_BOOT") == *it);
-		s->addWithLabel("START BGM AT BOOT", emuelec_bgm_boot_def);
-		s->addSaveFunc([emuelec_bgm_boot_def] {
-			/*runSystemCommand("echo "+emuelec_bgm_boot_def->getSelected()+" > /storage/.config/def_fe");*/
-			if (Settings::getInstance()->getString("EmuELEC_BGM_BOOT") != emuelec_bgm_boot_def->getSelected())
-				Settings::getInstance()->setString("EmuELEC_BGM_BOOT",  emuelec_bgm_boot_def->getSelected());
-		});
-		
-       auto sshd_enabled = std::make_shared<SwitchComponent>(mWindow);
-		sshd_enabled->setState(Settings::getInstance()->getBool("SSH"));
-		s->addWithLabel("ENABLE SSH", sshd_enabled);
-		s->addSaveFunc([sshd_enabled] {
-			if (sshd_enabled->getState() == false) {
-				runSystemCommand("systemctl stop sshd"); 
-				} else { 
-				runSystemCommand("systemctl start sshd");
-			}
-                Settings::getInstance()->setBool("SSH", sshd_enabled->getState());
-			});
-			
-		auto emuelec_boot_def = std::make_shared< OptionListComponent<std::string> >(mWindow, "START AT BOOT", false);
-		std::vector<std::string> devices;
-		devices.push_back("Emulationstation");
-		devices.push_back("Retroarch");
-		/*devices.push_back("Kodi");*/
-		for (auto it = devices.cbegin(); it != devices.cend(); it++)
-		emuelec_boot_def->add(*it, *it, Settings::getInstance()->getString("EmuELEC_BOOT") == *it);
-		s->addWithLabel("START AT BOOT", emuelec_boot_def);
-		s->addSaveFunc([emuelec_boot_def] {
-			if (Settings::getInstance()->getString("EmuELEC_BOOT") != emuelec_boot_def->getSelected())
-				Settings::getInstance()->setString("EmuELEC_BOOT", emuelec_boot_def->getSelected());
-		});
-       
-       auto bezels_enabled = std::make_shared<SwitchComponent>(mWindow);
+	  auto bezels_enabled = std::make_shared<SwitchComponent>(mWindow);
 		bezels_enabled->setState(Settings::getInstance()->getBool("EmuELEC_BEZELS"));
 		s->addWithLabel("ENABLE RA BEZELS", bezels_enabled);
 		s->addSaveFunc([bezels_enabled] {
@@ -488,47 +426,8 @@
 		});
 	/* END CHOICE */		
 
-	Window* window = mWindow;
-	
-	if (UIModeController::getInstance()->isUIModeFull())
-	{
-	row.addElement(std::make_shared<TextComponent>(window, "                                   !!!!!!!DANGER ZONE!!!!!!!", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-	s->addRow(row);
-	row.elements.clear();
-
-	row.makeAcceptInputHandler([window] {
-		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING THIS WILL DELETE ALL EMULATOR CONFIGS!!!!!!!!!! RESET EmuELEC EMULATORS TO DEFAULT AND RESTART?", "YES",
-				[] { 
-				runSystemCommand("systemd-run /emuelec/scripts/clearconfig.sh EMUS");
-				}, "NO", nullptr));
-	});
-	row.addElement(std::make_shared<TextComponent>(window, "RESET EmuELEC EMULATORS TO DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-	s->addRow(row);
-	row.elements.clear();
-	/*
-	row.makeAcceptInputHandler([window] {
-		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING THIS WILL DELETE ALL KODI ADDONS AND CONFIG!!!!!!!!!! RESET KODI TO DEFAULT CONFIG AND RESTART?", "YES",
-				[] { 
-				runSystemCommand("/usr/bin/clearconfig.sh KODI");
-				}, "NO", nullptr));
-	});
-	row.addElement(std::make_shared<TextComponent>(window, "RESET KODI TO DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-	s->addRow(row);
-	row.elements.clear();
-	*/
-	row.makeAcceptInputHandler([window] {
-		window->pushGui(new GuiMsgBox(window, "!!!!!!WARNING THIS WILL DELETE ALL CONFIGS/ADDONS!!!!!!!!!! RESET SYSTEM TO DEFAULT CONFIG AND RESTART?", "YES",
-				[] { 
-				runSystemCommand("systemd-run /emuelec/scripts/clearconfig.sh ALL");
-				}, "NO", nullptr));
-	});
-	row.addElement(std::make_shared<TextComponent>(window, "RESET SYSTEM TO DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-	s->addRow(row);
-	row.elements.clear();
-	
 	mWindow->pushGui(s);
  }
-}
 
 void GuiMenu::openScraperSettings()
 {
@@ -951,26 +850,22 @@
 	Window* window = mWindow;
 
 	ComponentListRow row;
-    /* row.makeAcceptInputHandler([window] {
+     row.makeAcceptInputHandler([window] {
 				window->pushGui(new GuiMsgBox(window, "QUIT TO KODI? ", "YES",
  					[] {
-					remove("/var/lock/start.games");
-            		runSystemCommand("touch /var/lock/start.kodi");
-			        runSystemCommand("systemctl start kodi.service");
+					runSystemCommand("systemctl start kodi.service");
 					Scripting::fireEvent("quit");
 					quitES("");
 				}, "NO", nullptr));
 			});
-			row.addElement(std::make_shared<TextComponent>(window, "START KODI", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-			s->addRow(row); */
+			row.addElement(std::make_shared<TextComponent>(window, "QUIT TO KODI", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			s->addRow(row); 
 
 			row.elements.clear();
 			row.makeAcceptInputHandler([window] {
 				window->pushGui(new GuiMsgBox(window, "QUIT TO RETROARCH? ", "YES",
 					[] {
-					remove("/var/lock/start.games");
-            		runSystemCommand("touch /var/lock/start.retro");
-			        runSystemCommand("systemctl start retroarch.service");
+					runSystemCommand("systemd-run /storage/.kodi/addons/script.emuelec.Amlogic.launcher/bin/ee_retroarch.sh");
 					Scripting::fireEvent("quit", "retroarch");
 					quitES("");
 				}, "NO", nullptr));
@@ -979,18 +874,6 @@
 			s->addRow(row);
 			
 		row.elements.clear();
-		row.makeAcceptInputHandler([window] {
-			window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
-				[] {
-    		   /*runSystemCommand("systemctl restart emustation.service");*/
-    		   Scripting::fireEvent("quit", "restart");
-			   quitES("");
-			}, "NO", nullptr));
-		});
-		row.addElement(std::make_shared<TextComponent>(window, "RESTART EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-		s->addRow(row);
-
-	row.elements.clear();
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
 			[] {
